<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
    var currentPath = this.Host.ResolvePath(".");
    var directories = Directory.EnumerateDirectories(currentPath);
    var resourceKeys = new Dictionary<string, List<string>>();
    var encoding = new UTF8Encoding(false);
    var allKindNames = new string[] { "create" };
#>
/* <autogenerated />
 * Do NOT Edit this file, it is automatically generated during
 * build time.
 */

namespace GitReleaseManager.Core.Templates
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    public static class ReleaseTemplates
    {
        public const string RESOURCE_PREFIX = "resource://";

        #region Templates
<#
        foreach (var directory in directories)
        {
            string resourceName = Path.GetFileName(directory).ToUpperInvariant() + "_";
#>
        public const string <#= resourceName #>NAME = "<#= resourceName.TrimEnd('_').ToLowerInvariant() #>";
<#
            foreach (var file in Directory.EnumerateFiles(directory, "*.sbn"))
            {
                var fileName = Path.GetFileNameWithoutExtension(file);
                var content = File.ReadAllText(file, encoding);
                var fileNameKey = fileName.Replace(".", "__").Replace("-", "__").ToUpperInvariant();
                resourceKeys.Add(resourceName + fileNameKey, new List<string>());
#>
        public static readonly string <#= resourceName + fileNameKey #> = "<#= content.Replace("\\", "\\\\").Replace("\"", "\\\"").Replace("\r", "\\r").Replace("\n", "\\n") #>";
<#
                foreach (var key in allKindNames)
                {
                    var path = Path.Combine(directory, key, Path.GetFileName(file));
                    if (!File.Exists(path))
                    {
                        resourceKeys[resourceName + fileNameKey].Add(resourceName + key.ToUpperInvariant() + "_" + fileNameKey);
                    }
                }
            }
            foreach (var resourceDirectory in Directory.EnumerateDirectories(directory))
            {
                string configResourceName = Path.GetFileName(resourceDirectory).ToUpperInvariant() + "_";
                foreach (var file in Directory.EnumerateFiles(resourceDirectory, "*.sbn"))
                {
                    var filename = Path.GetFileNameWithoutExtension(file);
                    var content = File.ReadAllText(file, encoding);
                    var fileNameKey = filename.Replace(".", "__").Replace("-", "__").ToUpperInvariant();
                    resourceKeys.Add(resourceName + configResourceName + fileNameKey, new List<string>{ resourceName + configResourceName + fileNameKey });
#>
        public static readonly string <#= resourceName + configResourceName + fileNameKey #> = "<#= content.Replace("\\", "\\\\").Replace("\"", "\\\"").Replace("\r", "\\r").Replace("\n", "\\n") #>";
<#
                }
            }
        }
#>
        #endregion Templates

        #region Loading

        public static string LoadTemplate(string resourcePath)
        {
            if (resourcePath is null)
            {
                throw new ArgumentNullException(nameof(resourcePath));
            }

            if (resourcePath.StartsWith(RESOURCE_PREFIX))
            {
                resourcePath = resourcePath.Substring(RESOURCE_PREFIX.Length);
            }

            switch (resourcePath.Replace("/", "_").Replace("-", "__").ToUpperInvariant())
            {
<#
                foreach (var item in resourceKeys)
                {
                    foreach (var value in item.Value)
                    {
#>
                    case "<#= value #>":
<#
                    }
#>
                        return <#= item.Key #>;

<#
                }
#>
                    default:
                        throw new ArgumentOutOfRangeException(nameof(resourcePath), $"Embedded template '{resourcePath}' was not found");
            }
        }

        #endregion Loading

        #region Exporting

        public static IReadOnlyDictionary<string, string> GetExportTemplates()
        {
            var result = new Dictionary<string, string>
            {
<#
        foreach (var key in resourceKeys.Keys)
        {
            var relativePath = key.Replace("__", "-").Split('_').Select(k => k.ToLowerInvariant());
            var text = "\"" + string.Join("\", \"", relativePath) + ".sbn\"";
#>
                { Path.Combine(<#= text #>), <#= key #> },
<#
        }
#>
            };

            return result;
        }

        #endregion
    }
}